name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Create virtual environment
      run: |
        python -m venv venv

    - name: Activate virtual environment and install dependencies
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        python -m pip install --upgrade pip
        pip install maturin pytest
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV
    
    - name: Run Rust tests
      run: cargo test

    - name: Run Rust linting
      run: |
        cargo fmt --all -- --check
        cargo clippy -- -D warnings

    - name: Build Python extension
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        maturin develop

    - name: Run Python tests
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        pytest tests/ -v
    
    - name: Test pure Python fallback
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        # Test that fallback works when Rust extension is not available
        python -c "
        import sys
        sys.path.insert(0, 'python')
        # Mock import error for Rust extension
        import builtins
        original_import = builtins.__import__
        def mock_import(name, *args, **kwargs):
            if 'demopy_gb_jj._rust' in name:
                raise ImportError('Mocked import error')
            return original_import(name, *args, **kwargs)
        builtins.__import__ = mock_import

        import demopy
        assert 'Python fallback' in demopy.hello()
        assert demopy.add(2, 3) == 5
        print('Pure Python fallback test passed!')
        "
