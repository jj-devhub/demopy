name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  rust-quality:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check Rust formatting
      run: cargo fmt --all -- --check
    
    - name: Run Rust linting (Clippy)
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run Rust tests
      run: cargo test --verbose
    
    - name: Check for unused dependencies
      run: |
        cargo install cargo-machete --locked
        cargo machete

  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pytest
        pip install -e python/
    
    - name: Check Python formatting (Black)
      run: black --check --diff python/ tests/
    
    - name: Check Python import sorting (isort)
      run: isort --check-only --diff python/ tests/
    
    - name: Run Python linting (Flake8)
      run: flake8 python/ tests/
    
    - name: Run Python type checking (MyPy)
      run: mypy python/demopy/ --ignore-missing-imports
      continue-on-error: true  # MyPy can be strict, make it non-blocking initially
    
    - name: Run Python tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/python"
        pytest tests/ -v

  yaml-quality:
    name: YAML and Config Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install YAML linter
      run: pip install yamllint
    
    - name: Check YAML files
      run: |
        yamllint .github/workflows/ || true
        yamllint .pre-commit-config.yaml || true
    
    - name: Validate GitHub Actions workflows
      run: |
        # Check workflow syntax
        for workflow in .github/workflows/*.yml; do
          echo "Validating $workflow"
          python -c "
        import yaml
        import sys
        try:
            with open('$workflow', 'r') as f:
                yaml.safe_load(f)
            print('✅ $workflow is valid')
        except Exception as e:
            print('❌ $workflow is invalid: {e}')
            sys.exit(1)
        "
        done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Rust security audit
      run: |
        cargo install cargo-audit --locked
        cargo audit
      continue-on-error: true  # Don't fail the build on security advisories initially
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Run Python security scan
      run: |
        pip install safety bandit
        # Check for known security vulnerabilities in dependencies
        safety check || true
        # Check for common security issues in Python code
        bandit -r python/ || true
      continue-on-error: true

  documentation:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Markdown files
      run: |
        # Install markdownlint
        npm install -g markdownlint-cli
        # Check markdown files (non-blocking initially)
        markdownlint *.md || true
        markdownlint docs/ || true
    
    - name: Check for broken links
      run: |
        # Install link checker
        npm install -g markdown-link-check
        # Check for broken links in markdown files
        find . -name "*.md" -not -path "./target/*" -not -path "./.venv/*" | xargs -I {} markdown-link-check {} || true
      continue-on-error: true

  integration-test:
    name: Integration Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build and test package
      run: |
        maturin build --release
        pip install target/wheels/*.whl
        python -c "
        import demopy
        print('✅ Package imports successfully')
        print('Version:', demopy.__version__)
        print('Functions:', demopy.__all__)
        
        # Test all functions
        print('hello():', demopy.hello())
        print('add(5, 7):', demopy.add(5, 7))
        print('multiply(2.5, 4.0):', demopy.multiply(2.5, 4.0))
        print('sum_list([1,2,3]):', demopy.sum_list([1,2,3]))
        print('reverse_string(\"test\"):', demopy.reverse_string('test'))
        print('power(2, 3):', demopy.power(2, 3))
        print('✅ All functions work correctly')
        "
      shell: bash
